version: "3.8"
services:
  user-api-service:
    container_name: user-api-service
    image: jorlugaqui/udragram-on-k8s:user-api-service
    build:
      dockerfile: "udagram-api-user/Dockerfile"
      context: .
    ports:
      - "8080:8080"
    volumes:
      - ./udagram-api-user:/app:delegated
      - /app/node_modules
    environment:
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - AWS_BUCKET=${AWS_BUCKET}
      - AWS_REGION=${AWS_REGION}
      - AWS_PROFILE=${AWS_PROFILE}
      - JWT_SECRET=${JWT_SECRET}
      - NODE_ENV=development
      - URL=${URL}
      - URL_PROXY=${URL_PROXY}
    command: sh -c "npm run dev"
  feed-api-service:
    container_name: feed-api-service
    image: jorlugaqui/udragram-on-k8s:feed-api-service
    build:
      dockerfile: "udagram-api-feed/Dockerfile"
      context: .
    ports:
        - "8081:8081"
    volumes:
        - ./udagram-api-feed:/app:delegated
        - /app/node_modules
        - $HOME/.aws:/root/.aws
    environment:
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - AWS_BUCKET=${AWS_BUCKET}
      - AWS_REGION=${AWS_REGION}
      - AWS_PROFILE=${AWS_PROFILE}
      - JWT_SECRET=${JWT_SECRET}
      - NODE_ENV=development
      - URL=${URL}
      - URL_PROXY=${URL_PROXY}
    command: sh -c "npm run dev"
  reverse-proxy-service:
    container_name: reverse-proxy-service
    image: jorlugaqui/udragram-on-k8s:reverse-proxy-service
    build:
      dockerfile: "udagram-reverse-proxy/Dockerfile"
      context: .
    ports:
      - "8000:8000"
  user-frontend-service:
    container_name: user-frontend-service
    image: jorlugaqui/udragram-on-k8s:user-frontend-service
    build:
      dockerfile: "udagram-frontend/Dockerfile"
      context: .
    ports:
      - "8100:80"
    # command: sh -c "ionic serve --external"